// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_define_new.proto

#include "msg_define_new.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace dealer {
class RequestInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestInfo>
      _instance;
} _RequestInfo_default_instance_;
class TradeTransInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeTransInfo>
      _instance;
} _TradeTransInfo_default_instance_;
class resp_msgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<resp_msg>
      _instance;
} _resp_msg_default_instance_;
}  // namespace dealer
namespace protobuf_msg_5fdefine_5fnew_2eproto {
void InitDefaultsRequestInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_5fdefine_5fnew_2eproto::InitDefaultsTradeTransInfo();
  {
    void* ptr = &::dealer::_RequestInfo_default_instance_;
    new (ptr) ::dealer::RequestInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dealer::RequestInfo::InitAsDefaultInstance();
}

void InitDefaultsRequestInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestInfoImpl);
}

void InitDefaultsTradeTransInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::dealer::_TradeTransInfo_default_instance_;
    new (ptr) ::dealer::TradeTransInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dealer::TradeTransInfo::InitAsDefaultInstance();
}

void InitDefaultsTradeTransInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeTransInfoImpl);
}

void InitDefaultsresp_msgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_5fdefine_5fnew_2eproto::InitDefaultsRequestInfo();
  {
    void* ptr = &::dealer::_resp_msg_default_instance_;
    new (ptr) ::dealer::resp_msg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dealer::resp_msg::InitAsDefaultInstance();
}

void InitDefaultsresp_msg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsresp_msgImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, manager_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, group_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, credit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, trade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, gw_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, gw_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::RequestInfo, gw_price_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, orderby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, sl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, tp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, ie_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, expiration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::TradeTransInfo, crc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::resp_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::resp_msg, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::resp_msg, ret_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::resp_msg, finish_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dealer::resp_msg, comment_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dealer::RequestInfo)},
  { 19, -1, sizeof(::dealer::TradeTransInfo)},
  { 38, -1, sizeof(::dealer::resp_msg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::dealer::_RequestInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dealer::_TradeTransInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dealer::_resp_msg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "msg_define_new.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024msg_define_new.proto\022\006dealer\"\210\002\n\013Reque"
      "stInfo\022\n\n\002id\030\001 \001(\005\022\016\n\006status\030\002 \001(\005\022\014\n\004ti"
      "me\030\003 \001(\005\022\017\n\007manager\030\004 \001(\005\022\r\n\005login\030\005 \001(\005"
      "\022\r\n\005group\030\006 \001(\t\022\022\n\ngroup_type\030\007 \001(\005\022\017\n\007b"
      "alance\030\010 \001(\001\022\016\n\006credit\030\t \001(\001\022\r\n\005price\030\n "
      "\003(\001\022%\n\005trade\030\013 \001(\0132\026.dealer.TradeTransIn"
      "fo\022\021\n\tgw_volume\030\014 \001(\005\022\020\n\010gw_order\030\r \001(\005\022"
      "\020\n\010gw_price\030\016 \001(\005\"\351\001\n\016TradeTransInfo\022\014\n\004"
      "type\030\001 \001(\r\022\r\n\005flags\030\002 \001(\005\022\013\n\003cmd\030\003 \001(\005\022\r"
      "\n\005order\030\004 \001(\005\022\017\n\007orderby\030\005 \001(\005\022\016\n\006symbol"
      "\030\006 \001(\t\022\016\n\006volume\030\007 \001(\005\022\r\n\005price\030\010 \001(\001\022\n\n"
      "\002sl\030\t \001(\001\022\n\n\002tp\030\n \001(\001\022\024\n\014ie_deviation\030\013 "
      "\001(\005\022\017\n\007comment\030\014 \001(\014\022\022\n\nexpiration\030\r \001(\005"
      "\022\013\n\003crc\030\016 \001(\005\"g\n\010resp_msg\022!\n\004info\030\001 \001(\0132"
      "\023.dealer.RequestInfo\022\020\n\010ret_type\030\002 \001(\005\022\025"
      "\n\rfinish_status\030\004 \001(\005\022\017\n\007comment\030\005 \001(\tb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 646);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_define_new.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_msg_5fdefine_5fnew_2eproto
namespace dealer {

// ===================================================================

void RequestInfo::InitAsDefaultInstance() {
  ::dealer::_RequestInfo_default_instance_._instance.get_mutable()->trade_ = const_cast< ::dealer::TradeTransInfo*>(
      ::dealer::TradeTransInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestInfo::kIdFieldNumber;
const int RequestInfo::kStatusFieldNumber;
const int RequestInfo::kTimeFieldNumber;
const int RequestInfo::kManagerFieldNumber;
const int RequestInfo::kLoginFieldNumber;
const int RequestInfo::kGroupFieldNumber;
const int RequestInfo::kGroupTypeFieldNumber;
const int RequestInfo::kBalanceFieldNumber;
const int RequestInfo::kCreditFieldNumber;
const int RequestInfo::kPriceFieldNumber;
const int RequestInfo::kTradeFieldNumber;
const int RequestInfo::kGwVolumeFieldNumber;
const int RequestInfo::kGwOrderFieldNumber;
const int RequestInfo::kGwPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestInfo::RequestInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_5fdefine_5fnew_2eproto::InitDefaultsRequestInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dealer.RequestInfo)
}
RequestInfo::RequestInfo(const RequestInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      price_(from.price_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group().size() > 0) {
    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.has_trade()) {
    trade_ = new ::dealer::TradeTransInfo(*from.trade_);
  } else {
    trade_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gw_price_) -
    reinterpret_cast<char*>(&id_)) + sizeof(gw_price_));
  // @@protoc_insertion_point(copy_constructor:dealer.RequestInfo)
}

void RequestInfo::SharedCtor() {
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gw_price_) -
      reinterpret_cast<char*>(&trade_)) + sizeof(gw_price_));
  _cached_size_ = 0;
}

RequestInfo::~RequestInfo() {
  // @@protoc_insertion_point(destructor:dealer.RequestInfo)
  SharedDtor();
}

void RequestInfo::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trade_;
}

void RequestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestInfo::descriptor() {
  ::protobuf_msg_5fdefine_5fnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fdefine_5fnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestInfo& RequestInfo::default_instance() {
  ::protobuf_msg_5fdefine_5fnew_2eproto::InitDefaultsRequestInfo();
  return *internal_default_instance();
}

RequestInfo* RequestInfo::New(::google::protobuf::Arena* arena) const {
  RequestInfo* n = new RequestInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dealer.RequestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  price_.Clear();
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && trade_ != NULL) {
    delete trade_;
  }
  trade_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gw_price_) -
      reinterpret_cast<char*>(&id_)) + sizeof(gw_price_));
  _internal_metadata_.Clear();
}

bool RequestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dealer.RequestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 manager = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 login = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), static_cast<int>(this->group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dealer.RequestInfo.group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double balance = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double credit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &credit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double price = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_price())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 82u, input, this->mutable_price())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dealer.TradeTransInfo trade = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trade()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gw_volume = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gw_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gw_order = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gw_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gw_price = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gw_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dealer.RequestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dealer.RequestInfo)
  return false;
#undef DO_
}

void RequestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dealer.RequestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // int32 manager = 4;
  if (this->manager() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->manager(), output);
  }

  // int32 login = 5;
  if (this->login() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->login(), output);
  }

  // string group = 6;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dealer.RequestInfo.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group(), output);
  }

  // int32 group_type = 7;
  if (this->group_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->group_type(), output);
  }

  // double balance = 8;
  if (this->balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->balance(), output);
  }

  // double credit = 9;
  if (this->credit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->credit(), output);
  }

  // repeated double price = 10;
  if (this->price_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _price_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->price().data(), this->price_size(), output);
  }

  // .dealer.TradeTransInfo trade = 11;
  if (this->has_trade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->trade_, output);
  }

  // int32 gw_volume = 12;
  if (this->gw_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gw_volume(), output);
  }

  // int32 gw_order = 13;
  if (this->gw_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gw_order(), output);
  }

  // int32 gw_price = 14;
  if (this->gw_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gw_price(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dealer.RequestInfo)
}

::google::protobuf::uint8* RequestInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dealer.RequestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // int32 manager = 4;
  if (this->manager() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->manager(), target);
  }

  // int32 login = 5;
  if (this->login() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->login(), target);
  }

  // string group = 6;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dealer.RequestInfo.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group(), target);
  }

  // int32 group_type = 7;
  if (this->group_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->group_type(), target);
  }

  // double balance = 8;
  if (this->balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->balance(), target);
  }

  // double credit = 9;
  if (this->credit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->credit(), target);
  }

  // repeated double price = 10;
  if (this->price_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _price_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->price_, target);
  }

  // .dealer.TradeTransInfo trade = 11;
  if (this->has_trade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->trade_, deterministic, target);
  }

  // int32 gw_volume = 12;
  if (this->gw_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gw_volume(), target);
  }

  // int32 gw_order = 13;
  if (this->gw_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gw_order(), target);
  }

  // int32 gw_price = 14;
  if (this->gw_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gw_price(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dealer.RequestInfo)
  return target;
}

size_t RequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dealer.RequestInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double price = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->price_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _price_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string group = 6;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  // .dealer.TradeTransInfo trade = 11;
  if (this->has_trade()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->trade_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // int32 manager = 4;
  if (this->manager() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->manager());
  }

  // int32 login = 5;
  if (this->login() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->login());
  }

  // int32 group_type = 7;
  if (this->group_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_type());
  }

  // double balance = 8;
  if (this->balance() != 0) {
    total_size += 1 + 8;
  }

  // double credit = 9;
  if (this->credit() != 0) {
    total_size += 1 + 8;
  }

  // int32 gw_volume = 12;
  if (this->gw_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gw_volume());
  }

  // int32 gw_order = 13;
  if (this->gw_order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gw_order());
  }

  // int32 gw_price = 14;
  if (this->gw_price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gw_price());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dealer.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dealer.RequestInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dealer.RequestInfo)
    MergeFrom(*source);
  }
}

void RequestInfo::MergeFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dealer.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  price_.MergeFrom(from.price_);
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.has_trade()) {
    mutable_trade()->::dealer::TradeTransInfo::MergeFrom(from.trade());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.manager() != 0) {
    set_manager(from.manager());
  }
  if (from.login() != 0) {
    set_login(from.login());
  }
  if (from.group_type() != 0) {
    set_group_type(from.group_type());
  }
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
  if (from.credit() != 0) {
    set_credit(from.credit());
  }
  if (from.gw_volume() != 0) {
    set_gw_volume(from.gw_volume());
  }
  if (from.gw_order() != 0) {
    set_gw_order(from.gw_order());
  }
  if (from.gw_price() != 0) {
    set_gw_price(from.gw_price());
  }
}

void RequestInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dealer.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInfo::CopyFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dealer.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInfo::IsInitialized() const {
  return true;
}

void RequestInfo::Swap(RequestInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestInfo::InternalSwap(RequestInfo* other) {
  using std::swap;
  price_.InternalSwap(&other->price_);
  group_.Swap(&other->group_);
  swap(trade_, other->trade_);
  swap(id_, other->id_);
  swap(status_, other->status_);
  swap(time_, other->time_);
  swap(manager_, other->manager_);
  swap(login_, other->login_);
  swap(group_type_, other->group_type_);
  swap(balance_, other->balance_);
  swap(credit_, other->credit_);
  swap(gw_volume_, other->gw_volume_);
  swap(gw_order_, other->gw_order_);
  swap(gw_price_, other->gw_price_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestInfo::GetMetadata() const {
  protobuf_msg_5fdefine_5fnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fdefine_5fnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeTransInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeTransInfo::kTypeFieldNumber;
const int TradeTransInfo::kFlagsFieldNumber;
const int TradeTransInfo::kCmdFieldNumber;
const int TradeTransInfo::kOrderFieldNumber;
const int TradeTransInfo::kOrderbyFieldNumber;
const int TradeTransInfo::kSymbolFieldNumber;
const int TradeTransInfo::kVolumeFieldNumber;
const int TradeTransInfo::kPriceFieldNumber;
const int TradeTransInfo::kSlFieldNumber;
const int TradeTransInfo::kTpFieldNumber;
const int TradeTransInfo::kIeDeviationFieldNumber;
const int TradeTransInfo::kCommentFieldNumber;
const int TradeTransInfo::kExpirationFieldNumber;
const int TradeTransInfo::kCrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeTransInfo::TradeTransInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_5fdefine_5fnew_2eproto::InitDefaultsTradeTransInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dealer.TradeTransInfo)
}
TradeTransInfo::TradeTransInfo(const TradeTransInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&crc_) -
    reinterpret_cast<char*>(&type_)) + sizeof(crc_));
  // @@protoc_insertion_point(copy_constructor:dealer.TradeTransInfo)
}

void TradeTransInfo::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crc_) -
      reinterpret_cast<char*>(&type_)) + sizeof(crc_));
  _cached_size_ = 0;
}

TradeTransInfo::~TradeTransInfo() {
  // @@protoc_insertion_point(destructor:dealer.TradeTransInfo)
  SharedDtor();
}

void TradeTransInfo::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeTransInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeTransInfo::descriptor() {
  ::protobuf_msg_5fdefine_5fnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fdefine_5fnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeTransInfo& TradeTransInfo::default_instance() {
  ::protobuf_msg_5fdefine_5fnew_2eproto::InitDefaultsTradeTransInfo();
  return *internal_default_instance();
}

TradeTransInfo* TradeTransInfo::New(::google::protobuf::Arena* arena) const {
  TradeTransInfo* n = new TradeTransInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TradeTransInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dealer.TradeTransInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crc_) -
      reinterpret_cast<char*>(&type_)) + sizeof(crc_));
  _internal_metadata_.Clear();
}

bool TradeTransInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dealer.TradeTransInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 order = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 orderby = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dealer.TradeTransInfo.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ie_deviation = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ie_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes comment = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_comment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 expiration = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 crc = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dealer.TradeTransInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dealer.TradeTransInfo)
  return false;
#undef DO_
}

void TradeTransInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dealer.TradeTransInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // int32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flags(), output);
  }

  // int32 cmd = 3;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmd(), output);
  }

  // int32 order = 4;
  if (this->order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->order(), output);
  }

  // int32 orderby = 5;
  if (this->orderby() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->orderby(), output);
  }

  // string symbol = 6;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dealer.TradeTransInfo.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->symbol(), output);
  }

  // int32 volume = 7;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->volume(), output);
  }

  // double price = 8;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->price(), output);
  }

  // double sl = 9;
  if (this->sl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->sl(), output);
  }

  // double tp = 10;
  if (this->tp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->tp(), output);
  }

  // int32 ie_deviation = 11;
  if (this->ie_deviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ie_deviation(), output);
  }

  // bytes comment = 12;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->comment(), output);
  }

  // int32 expiration = 13;
  if (this->expiration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->expiration(), output);
  }

  // int32 crc = 14;
  if (this->crc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->crc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dealer.TradeTransInfo)
}

::google::protobuf::uint8* TradeTransInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dealer.TradeTransInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // int32 flags = 2;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flags(), target);
  }

  // int32 cmd = 3;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmd(), target);
  }

  // int32 order = 4;
  if (this->order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->order(), target);
  }

  // int32 orderby = 5;
  if (this->orderby() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->orderby(), target);
  }

  // string symbol = 6;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dealer.TradeTransInfo.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->symbol(), target);
  }

  // int32 volume = 7;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->volume(), target);
  }

  // double price = 8;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->price(), target);
  }

  // double sl = 9;
  if (this->sl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->sl(), target);
  }

  // double tp = 10;
  if (this->tp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->tp(), target);
  }

  // int32 ie_deviation = 11;
  if (this->ie_deviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ie_deviation(), target);
  }

  // bytes comment = 12;
  if (this->comment().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->comment(), target);
  }

  // int32 expiration = 13;
  if (this->expiration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->expiration(), target);
  }

  // int32 crc = 14;
  if (this->crc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->crc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dealer.TradeTransInfo)
  return target;
}

size_t TradeTransInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dealer.TradeTransInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string symbol = 6;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // bytes comment = 12;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->comment());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // int32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flags());
  }

  // int32 cmd = 3;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  // int32 order = 4;
  if (this->order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order());
  }

  // int32 orderby = 5;
  if (this->orderby() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orderby());
  }

  // int32 volume = 7;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // double price = 8;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // double sl = 9;
  if (this->sl() != 0) {
    total_size += 1 + 8;
  }

  // double tp = 10;
  if (this->tp() != 0) {
    total_size += 1 + 8;
  }

  // int32 ie_deviation = 11;
  if (this->ie_deviation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ie_deviation());
  }

  // int32 expiration = 13;
  if (this->expiration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->expiration());
  }

  // int32 crc = 14;
  if (this->crc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->crc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeTransInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dealer.TradeTransInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeTransInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeTransInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dealer.TradeTransInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dealer.TradeTransInfo)
    MergeFrom(*source);
  }
}

void TradeTransInfo::MergeFrom(const TradeTransInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dealer.TradeTransInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.order() != 0) {
    set_order(from.order());
  }
  if (from.orderby() != 0) {
    set_orderby(from.orderby());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.sl() != 0) {
    set_sl(from.sl());
  }
  if (from.tp() != 0) {
    set_tp(from.tp());
  }
  if (from.ie_deviation() != 0) {
    set_ie_deviation(from.ie_deviation());
  }
  if (from.expiration() != 0) {
    set_expiration(from.expiration());
  }
  if (from.crc() != 0) {
    set_crc(from.crc());
  }
}

void TradeTransInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dealer.TradeTransInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeTransInfo::CopyFrom(const TradeTransInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dealer.TradeTransInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeTransInfo::IsInitialized() const {
  return true;
}

void TradeTransInfo::Swap(TradeTransInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeTransInfo::InternalSwap(TradeTransInfo* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_);
  comment_.Swap(&other->comment_);
  swap(type_, other->type_);
  swap(flags_, other->flags_);
  swap(cmd_, other->cmd_);
  swap(order_, other->order_);
  swap(orderby_, other->orderby_);
  swap(volume_, other->volume_);
  swap(price_, other->price_);
  swap(sl_, other->sl_);
  swap(tp_, other->tp_);
  swap(ie_deviation_, other->ie_deviation_);
  swap(expiration_, other->expiration_);
  swap(crc_, other->crc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeTransInfo::GetMetadata() const {
  protobuf_msg_5fdefine_5fnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fdefine_5fnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void resp_msg::InitAsDefaultInstance() {
  ::dealer::_resp_msg_default_instance_._instance.get_mutable()->info_ = const_cast< ::dealer::RequestInfo*>(
      ::dealer::RequestInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int resp_msg::kInfoFieldNumber;
const int resp_msg::kRetTypeFieldNumber;
const int resp_msg::kFinishStatusFieldNumber;
const int resp_msg::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

resp_msg::resp_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_5fdefine_5fnew_2eproto::InitDefaultsresp_msg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dealer.resp_msg)
}
resp_msg::resp_msg(const resp_msg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_info()) {
    info_ = new ::dealer::RequestInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&ret_type_, &from.ret_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&finish_status_) -
    reinterpret_cast<char*>(&ret_type_)) + sizeof(finish_status_));
  // @@protoc_insertion_point(copy_constructor:dealer.resp_msg)
}

void resp_msg::SharedCtor() {
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_status_) -
      reinterpret_cast<char*>(&info_)) + sizeof(finish_status_));
  _cached_size_ = 0;
}

resp_msg::~resp_msg() {
  // @@protoc_insertion_point(destructor:dealer.resp_msg)
  SharedDtor();
}

void resp_msg::SharedDtor() {
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void resp_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* resp_msg::descriptor() {
  ::protobuf_msg_5fdefine_5fnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fdefine_5fnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const resp_msg& resp_msg::default_instance() {
  ::protobuf_msg_5fdefine_5fnew_2eproto::InitDefaultsresp_msg();
  return *internal_default_instance();
}

resp_msg* resp_msg::New(::google::protobuf::Arena* arena) const {
  resp_msg* n = new resp_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void resp_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:dealer.resp_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  ::memset(&ret_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_status_) -
      reinterpret_cast<char*>(&ret_type_)) + sizeof(finish_status_));
  _internal_metadata_.Clear();
}

bool resp_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dealer.resp_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dealer.RequestInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ret_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 finish_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dealer.resp_msg.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dealer.resp_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dealer.resp_msg)
  return false;
#undef DO_
}

void resp_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dealer.resp_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dealer.RequestInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // int32 ret_type = 2;
  if (this->ret_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_type(), output);
  }

  // int32 finish_status = 4;
  if (this->finish_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->finish_status(), output);
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dealer.resp_msg.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->comment(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dealer.resp_msg)
}

::google::protobuf::uint8* resp_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dealer.resp_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dealer.RequestInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->info_, deterministic, target);
  }

  // int32 ret_type = 2;
  if (this->ret_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_type(), target);
  }

  // int32 finish_status = 4;
  if (this->finish_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->finish_status(), target);
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dealer.resp_msg.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dealer.resp_msg)
  return target;
}

size_t resp_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dealer.resp_msg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string comment = 5;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .dealer.RequestInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_);
  }

  // int32 ret_type = 2;
  if (this->ret_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_type());
  }

  // int32 finish_status = 4;
  if (this->finish_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->finish_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void resp_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dealer.resp_msg)
  GOOGLE_DCHECK_NE(&from, this);
  const resp_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const resp_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dealer.resp_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dealer.resp_msg)
    MergeFrom(*source);
  }
}

void resp_msg::MergeFrom(const resp_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dealer.resp_msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_info()) {
    mutable_info()->::dealer::RequestInfo::MergeFrom(from.info());
  }
  if (from.ret_type() != 0) {
    set_ret_type(from.ret_type());
  }
  if (from.finish_status() != 0) {
    set_finish_status(from.finish_status());
  }
}

void resp_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dealer.resp_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void resp_msg::CopyFrom(const resp_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dealer.resp_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool resp_msg::IsInitialized() const {
  return true;
}

void resp_msg::Swap(resp_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void resp_msg::InternalSwap(resp_msg* other) {
  using std::swap;
  comment_.Swap(&other->comment_);
  swap(info_, other->info_);
  swap(ret_type_, other->ret_type_);
  swap(finish_status_, other->finish_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata resp_msg::GetMetadata() const {
  protobuf_msg_5fdefine_5fnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fdefine_5fnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dealer

// @@protoc_insertion_point(global_scope)
