// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_define_new.proto

#ifndef PROTOBUF_msg_5fdefine_5fnew_2eproto__INCLUDED
#define PROTOBUF_msg_5fdefine_5fnew_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_msg_5fdefine_5fnew_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRequestInfoImpl();
void InitDefaultsRequestInfo();
void InitDefaultsTradeTransInfoImpl();
void InitDefaultsTradeTransInfo();
void InitDefaultsresp_msgImpl();
void InitDefaultsresp_msg();
inline void InitDefaults() {
  InitDefaultsRequestInfo();
  InitDefaultsTradeTransInfo();
  InitDefaultsresp_msg();
}
}  // namespace protobuf_msg_5fdefine_5fnew_2eproto
namespace dealer {
class RequestInfo;
class RequestInfoDefaultTypeInternal;
extern RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
class TradeTransInfo;
class TradeTransInfoDefaultTypeInternal;
extern TradeTransInfoDefaultTypeInternal _TradeTransInfo_default_instance_;
class resp_msg;
class resp_msgDefaultTypeInternal;
extern resp_msgDefaultTypeInternal _resp_msg_default_instance_;
}  // namespace dealer
namespace dealer {

// ===================================================================

class RequestInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dealer.RequestInfo) */ {
 public:
  RequestInfo();
  virtual ~RequestInfo();

  RequestInfo(const RequestInfo& from);

  inline RequestInfo& operator=(const RequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestInfo(RequestInfo&& from) noexcept
    : RequestInfo() {
    *this = ::std::move(from);
  }

  inline RequestInfo& operator=(RequestInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestInfo* internal_default_instance() {
    return reinterpret_cast<const RequestInfo*>(
               &_RequestInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RequestInfo* other);
  friend void swap(RequestInfo& a, RequestInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RequestInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RequestInfo& from);
  void MergeFrom(const RequestInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RequestInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double price = 10;
  int price_size() const;
  void clear_price();
  static const int kPriceFieldNumber = 10;
  double price(int index) const;
  void set_price(int index, double value);
  void add_price(double value);
  const ::google::protobuf::RepeatedField< double >&
      price() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_price();

  // string group = 6;
  void clear_group();
  static const int kGroupFieldNumber = 6;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // .dealer.TradeTransInfo trade = 11;
  bool has_trade() const;
  void clear_trade();
  static const int kTradeFieldNumber = 11;
  const ::dealer::TradeTransInfo& trade() const;
  ::dealer::TradeTransInfo* release_trade();
  ::dealer::TradeTransInfo* mutable_trade();
  void set_allocated_trade(::dealer::TradeTransInfo* trade);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // int32 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // int32 manager = 4;
  void clear_manager();
  static const int kManagerFieldNumber = 4;
  ::google::protobuf::int32 manager() const;
  void set_manager(::google::protobuf::int32 value);

  // int32 login = 5;
  void clear_login();
  static const int kLoginFieldNumber = 5;
  ::google::protobuf::int32 login() const;
  void set_login(::google::protobuf::int32 value);

  // int32 group_type = 7;
  void clear_group_type();
  static const int kGroupTypeFieldNumber = 7;
  ::google::protobuf::int32 group_type() const;
  void set_group_type(::google::protobuf::int32 value);

  // double balance = 8;
  void clear_balance();
  static const int kBalanceFieldNumber = 8;
  double balance() const;
  void set_balance(double value);

  // double credit = 9;
  void clear_credit();
  static const int kCreditFieldNumber = 9;
  double credit() const;
  void set_credit(double value);

  // int32 gw_volume = 12;
  void clear_gw_volume();
  static const int kGwVolumeFieldNumber = 12;
  ::google::protobuf::int32 gw_volume() const;
  void set_gw_volume(::google::protobuf::int32 value);

  // int32 gw_order = 13;
  void clear_gw_order();
  static const int kGwOrderFieldNumber = 13;
  ::google::protobuf::int32 gw_order() const;
  void set_gw_order(::google::protobuf::int32 value);

  // int32 gw_price = 14;
  void clear_gw_price();
  static const int kGwPriceFieldNumber = 14;
  ::google::protobuf::int32 gw_price() const;
  void set_gw_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dealer.RequestInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > price_;
  mutable int _price_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::dealer::TradeTransInfo* trade_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 manager_;
  ::google::protobuf::int32 login_;
  ::google::protobuf::int32 group_type_;
  double balance_;
  double credit_;
  ::google::protobuf::int32 gw_volume_;
  ::google::protobuf::int32 gw_order_;
  ::google::protobuf::int32 gw_price_;
  mutable int _cached_size_;
  friend struct ::protobuf_msg_5fdefine_5fnew_2eproto::TableStruct;
  friend void ::protobuf_msg_5fdefine_5fnew_2eproto::InitDefaultsRequestInfoImpl();
};
// -------------------------------------------------------------------

class TradeTransInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dealer.TradeTransInfo) */ {
 public:
  TradeTransInfo();
  virtual ~TradeTransInfo();

  TradeTransInfo(const TradeTransInfo& from);

  inline TradeTransInfo& operator=(const TradeTransInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradeTransInfo(TradeTransInfo&& from) noexcept
    : TradeTransInfo() {
    *this = ::std::move(from);
  }

  inline TradeTransInfo& operator=(TradeTransInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeTransInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeTransInfo* internal_default_instance() {
    return reinterpret_cast<const TradeTransInfo*>(
               &_TradeTransInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TradeTransInfo* other);
  friend void swap(TradeTransInfo& a, TradeTransInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradeTransInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TradeTransInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TradeTransInfo& from);
  void MergeFrom(const TradeTransInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TradeTransInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string symbol = 6;
  void clear_symbol();
  static const int kSymbolFieldNumber = 6;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // bytes comment = 12;
  void clear_comment();
  static const int kCommentFieldNumber = 12;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const void* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // int32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // int32 cmd = 3;
  void clear_cmd();
  static const int kCmdFieldNumber = 3;
  ::google::protobuf::int32 cmd() const;
  void set_cmd(::google::protobuf::int32 value);

  // int32 order = 4;
  void clear_order();
  static const int kOrderFieldNumber = 4;
  ::google::protobuf::int32 order() const;
  void set_order(::google::protobuf::int32 value);

  // int32 orderby = 5;
  void clear_orderby();
  static const int kOrderbyFieldNumber = 5;
  ::google::protobuf::int32 orderby() const;
  void set_orderby(::google::protobuf::int32 value);

  // int32 volume = 7;
  void clear_volume();
  static const int kVolumeFieldNumber = 7;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // double price = 8;
  void clear_price();
  static const int kPriceFieldNumber = 8;
  double price() const;
  void set_price(double value);

  // double sl = 9;
  void clear_sl();
  static const int kSlFieldNumber = 9;
  double sl() const;
  void set_sl(double value);

  // double tp = 10;
  void clear_tp();
  static const int kTpFieldNumber = 10;
  double tp() const;
  void set_tp(double value);

  // int32 ie_deviation = 11;
  void clear_ie_deviation();
  static const int kIeDeviationFieldNumber = 11;
  ::google::protobuf::int32 ie_deviation() const;
  void set_ie_deviation(::google::protobuf::int32 value);

  // int32 expiration = 13;
  void clear_expiration();
  static const int kExpirationFieldNumber = 13;
  ::google::protobuf::int32 expiration() const;
  void set_expiration(::google::protobuf::int32 value);

  // int32 crc = 14;
  void clear_crc();
  static const int kCrcFieldNumber = 14;
  ::google::protobuf::int32 crc() const;
  void set_crc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dealer.TradeTransInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::int32 flags_;
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 order_;
  ::google::protobuf::int32 orderby_;
  ::google::protobuf::int32 volume_;
  double price_;
  double sl_;
  double tp_;
  ::google::protobuf::int32 ie_deviation_;
  ::google::protobuf::int32 expiration_;
  ::google::protobuf::int32 crc_;
  mutable int _cached_size_;
  friend struct ::protobuf_msg_5fdefine_5fnew_2eproto::TableStruct;
  friend void ::protobuf_msg_5fdefine_5fnew_2eproto::InitDefaultsTradeTransInfoImpl();
};
// -------------------------------------------------------------------

class resp_msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dealer.resp_msg) */ {
 public:
  resp_msg();
  virtual ~resp_msg();

  resp_msg(const resp_msg& from);

  inline resp_msg& operator=(const resp_msg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  resp_msg(resp_msg&& from) noexcept
    : resp_msg() {
    *this = ::std::move(from);
  }

  inline resp_msg& operator=(resp_msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const resp_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const resp_msg* internal_default_instance() {
    return reinterpret_cast<const resp_msg*>(
               &_resp_msg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(resp_msg* other);
  friend void swap(resp_msg& a, resp_msg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline resp_msg* New() const PROTOBUF_FINAL { return New(NULL); }

  resp_msg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const resp_msg& from);
  void MergeFrom(const resp_msg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(resp_msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string comment = 5;
  void clear_comment();
  static const int kCommentFieldNumber = 5;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // .dealer.RequestInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::dealer::RequestInfo& info() const;
  ::dealer::RequestInfo* release_info();
  ::dealer::RequestInfo* mutable_info();
  void set_allocated_info(::dealer::RequestInfo* info);

  // int32 ret_type = 2;
  void clear_ret_type();
  static const int kRetTypeFieldNumber = 2;
  ::google::protobuf::int32 ret_type() const;
  void set_ret_type(::google::protobuf::int32 value);

  // int32 finish_status = 4;
  void clear_finish_status();
  static const int kFinishStatusFieldNumber = 4;
  ::google::protobuf::int32 finish_status() const;
  void set_finish_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dealer.resp_msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::dealer::RequestInfo* info_;
  ::google::protobuf::int32 ret_type_;
  ::google::protobuf::int32 finish_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_msg_5fdefine_5fnew_2eproto::TableStruct;
  friend void ::protobuf_msg_5fdefine_5fnew_2eproto::InitDefaultsresp_msgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestInfo

// int32 id = 1;
inline void RequestInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 RequestInfo::id() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.id)
  return id_;
}
inline void RequestInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.id)
}

// int32 status = 2;
inline void RequestInfo::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 RequestInfo::status() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.status)
  return status_;
}
inline void RequestInfo::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.status)
}

// int32 time = 3;
inline void RequestInfo::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 RequestInfo::time() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.time)
  return time_;
}
inline void RequestInfo::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.time)
}

// int32 manager = 4;
inline void RequestInfo::clear_manager() {
  manager_ = 0;
}
inline ::google::protobuf::int32 RequestInfo::manager() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.manager)
  return manager_;
}
inline void RequestInfo::set_manager(::google::protobuf::int32 value) {
  
  manager_ = value;
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.manager)
}

// int32 login = 5;
inline void RequestInfo::clear_login() {
  login_ = 0;
}
inline ::google::protobuf::int32 RequestInfo::login() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.login)
  return login_;
}
inline void RequestInfo::set_login(::google::protobuf::int32 value) {
  
  login_ = value;
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.login)
}

// string group = 6;
inline void RequestInfo::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestInfo::group() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.group)
  return group_.GetNoArena();
}
inline void RequestInfo::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.group)
}
#if LANG_CXX11
inline void RequestInfo::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dealer.RequestInfo.group)
}
#endif
inline void RequestInfo::set_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dealer.RequestInfo.group)
}
inline void RequestInfo::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dealer.RequestInfo.group)
}
inline ::std::string* RequestInfo::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:dealer.RequestInfo.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestInfo::release_group() {
  // @@protoc_insertion_point(field_release:dealer.RequestInfo.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInfo::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:dealer.RequestInfo.group)
}

// int32 group_type = 7;
inline void RequestInfo::clear_group_type() {
  group_type_ = 0;
}
inline ::google::protobuf::int32 RequestInfo::group_type() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.group_type)
  return group_type_;
}
inline void RequestInfo::set_group_type(::google::protobuf::int32 value) {
  
  group_type_ = value;
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.group_type)
}

// double balance = 8;
inline void RequestInfo::clear_balance() {
  balance_ = 0;
}
inline double RequestInfo::balance() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.balance)
  return balance_;
}
inline void RequestInfo::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.balance)
}

// double credit = 9;
inline void RequestInfo::clear_credit() {
  credit_ = 0;
}
inline double RequestInfo::credit() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.credit)
  return credit_;
}
inline void RequestInfo::set_credit(double value) {
  
  credit_ = value;
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.credit)
}

// repeated double price = 10;
inline int RequestInfo::price_size() const {
  return price_.size();
}
inline void RequestInfo::clear_price() {
  price_.Clear();
}
inline double RequestInfo::price(int index) const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.price)
  return price_.Get(index);
}
inline void RequestInfo::set_price(int index, double value) {
  price_.Set(index, value);
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.price)
}
inline void RequestInfo::add_price(double value) {
  price_.Add(value);
  // @@protoc_insertion_point(field_add:dealer.RequestInfo.price)
}
inline const ::google::protobuf::RepeatedField< double >&
RequestInfo::price() const {
  // @@protoc_insertion_point(field_list:dealer.RequestInfo.price)
  return price_;
}
inline ::google::protobuf::RepeatedField< double >*
RequestInfo::mutable_price() {
  // @@protoc_insertion_point(field_mutable_list:dealer.RequestInfo.price)
  return &price_;
}

// .dealer.TradeTransInfo trade = 11;
inline bool RequestInfo::has_trade() const {
  return this != internal_default_instance() && trade_ != NULL;
}
inline void RequestInfo::clear_trade() {
  if (GetArenaNoVirtual() == NULL && trade_ != NULL) {
    delete trade_;
  }
  trade_ = NULL;
}
inline const ::dealer::TradeTransInfo& RequestInfo::trade() const {
  const ::dealer::TradeTransInfo* p = trade_;
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.trade)
  return p != NULL ? *p : *reinterpret_cast<const ::dealer::TradeTransInfo*>(
      &::dealer::_TradeTransInfo_default_instance_);
}
inline ::dealer::TradeTransInfo* RequestInfo::release_trade() {
  // @@protoc_insertion_point(field_release:dealer.RequestInfo.trade)
  
  ::dealer::TradeTransInfo* temp = trade_;
  trade_ = NULL;
  return temp;
}
inline ::dealer::TradeTransInfo* RequestInfo::mutable_trade() {
  
  if (trade_ == NULL) {
    trade_ = new ::dealer::TradeTransInfo;
  }
  // @@protoc_insertion_point(field_mutable:dealer.RequestInfo.trade)
  return trade_;
}
inline void RequestInfo::set_allocated_trade(::dealer::TradeTransInfo* trade) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trade_;
  }
  if (trade) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trade = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trade, submessage_arena);
    }
    
  } else {
    
  }
  trade_ = trade;
  // @@protoc_insertion_point(field_set_allocated:dealer.RequestInfo.trade)
}

// int32 gw_volume = 12;
inline void RequestInfo::clear_gw_volume() {
  gw_volume_ = 0;
}
inline ::google::protobuf::int32 RequestInfo::gw_volume() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.gw_volume)
  return gw_volume_;
}
inline void RequestInfo::set_gw_volume(::google::protobuf::int32 value) {
  
  gw_volume_ = value;
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.gw_volume)
}

// int32 gw_order = 13;
inline void RequestInfo::clear_gw_order() {
  gw_order_ = 0;
}
inline ::google::protobuf::int32 RequestInfo::gw_order() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.gw_order)
  return gw_order_;
}
inline void RequestInfo::set_gw_order(::google::protobuf::int32 value) {
  
  gw_order_ = value;
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.gw_order)
}

// int32 gw_price = 14;
inline void RequestInfo::clear_gw_price() {
  gw_price_ = 0;
}
inline ::google::protobuf::int32 RequestInfo::gw_price() const {
  // @@protoc_insertion_point(field_get:dealer.RequestInfo.gw_price)
  return gw_price_;
}
inline void RequestInfo::set_gw_price(::google::protobuf::int32 value) {
  
  gw_price_ = value;
  // @@protoc_insertion_point(field_set:dealer.RequestInfo.gw_price)
}

// -------------------------------------------------------------------

// TradeTransInfo

// uint32 type = 1;
inline void TradeTransInfo::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 TradeTransInfo::type() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.type)
  return type_;
}
inline void TradeTransInfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.type)
}

// int32 flags = 2;
inline void TradeTransInfo::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 TradeTransInfo::flags() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.flags)
  return flags_;
}
inline void TradeTransInfo::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.flags)
}

// int32 cmd = 3;
inline void TradeTransInfo::clear_cmd() {
  cmd_ = 0;
}
inline ::google::protobuf::int32 TradeTransInfo::cmd() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.cmd)
  return cmd_;
}
inline void TradeTransInfo::set_cmd(::google::protobuf::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.cmd)
}

// int32 order = 4;
inline void TradeTransInfo::clear_order() {
  order_ = 0;
}
inline ::google::protobuf::int32 TradeTransInfo::order() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.order)
  return order_;
}
inline void TradeTransInfo::set_order(::google::protobuf::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.order)
}

// int32 orderby = 5;
inline void TradeTransInfo::clear_orderby() {
  orderby_ = 0;
}
inline ::google::protobuf::int32 TradeTransInfo::orderby() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.orderby)
  return orderby_;
}
inline void TradeTransInfo::set_orderby(::google::protobuf::int32 value) {
  
  orderby_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.orderby)
}

// string symbol = 6;
inline void TradeTransInfo::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeTransInfo::symbol() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.symbol)
  return symbol_.GetNoArena();
}
inline void TradeTransInfo::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.symbol)
}
#if LANG_CXX11
inline void TradeTransInfo::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dealer.TradeTransInfo.symbol)
}
#endif
inline void TradeTransInfo::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dealer.TradeTransInfo.symbol)
}
inline void TradeTransInfo::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dealer.TradeTransInfo.symbol)
}
inline ::std::string* TradeTransInfo::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:dealer.TradeTransInfo.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeTransInfo::release_symbol() {
  // @@protoc_insertion_point(field_release:dealer.TradeTransInfo.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeTransInfo::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:dealer.TradeTransInfo.symbol)
}

// int32 volume = 7;
inline void TradeTransInfo::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 TradeTransInfo::volume() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.volume)
  return volume_;
}
inline void TradeTransInfo::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.volume)
}

// double price = 8;
inline void TradeTransInfo::clear_price() {
  price_ = 0;
}
inline double TradeTransInfo::price() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.price)
  return price_;
}
inline void TradeTransInfo::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.price)
}

// double sl = 9;
inline void TradeTransInfo::clear_sl() {
  sl_ = 0;
}
inline double TradeTransInfo::sl() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.sl)
  return sl_;
}
inline void TradeTransInfo::set_sl(double value) {
  
  sl_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.sl)
}

// double tp = 10;
inline void TradeTransInfo::clear_tp() {
  tp_ = 0;
}
inline double TradeTransInfo::tp() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.tp)
  return tp_;
}
inline void TradeTransInfo::set_tp(double value) {
  
  tp_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.tp)
}

// int32 ie_deviation = 11;
inline void TradeTransInfo::clear_ie_deviation() {
  ie_deviation_ = 0;
}
inline ::google::protobuf::int32 TradeTransInfo::ie_deviation() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.ie_deviation)
  return ie_deviation_;
}
inline void TradeTransInfo::set_ie_deviation(::google::protobuf::int32 value) {
  
  ie_deviation_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.ie_deviation)
}

// bytes comment = 12;
inline void TradeTransInfo::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeTransInfo::comment() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.comment)
  return comment_.GetNoArena();
}
inline void TradeTransInfo::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.comment)
}
#if LANG_CXX11
inline void TradeTransInfo::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dealer.TradeTransInfo.comment)
}
#endif
inline void TradeTransInfo::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dealer.TradeTransInfo.comment)
}
inline void TradeTransInfo::set_comment(const void* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dealer.TradeTransInfo.comment)
}
inline ::std::string* TradeTransInfo::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:dealer.TradeTransInfo.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeTransInfo::release_comment() {
  // @@protoc_insertion_point(field_release:dealer.TradeTransInfo.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeTransInfo::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:dealer.TradeTransInfo.comment)
}

// int32 expiration = 13;
inline void TradeTransInfo::clear_expiration() {
  expiration_ = 0;
}
inline ::google::protobuf::int32 TradeTransInfo::expiration() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.expiration)
  return expiration_;
}
inline void TradeTransInfo::set_expiration(::google::protobuf::int32 value) {
  
  expiration_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.expiration)
}

// int32 crc = 14;
inline void TradeTransInfo::clear_crc() {
  crc_ = 0;
}
inline ::google::protobuf::int32 TradeTransInfo::crc() const {
  // @@protoc_insertion_point(field_get:dealer.TradeTransInfo.crc)
  return crc_;
}
inline void TradeTransInfo::set_crc(::google::protobuf::int32 value) {
  
  crc_ = value;
  // @@protoc_insertion_point(field_set:dealer.TradeTransInfo.crc)
}

// -------------------------------------------------------------------

// resp_msg

// .dealer.RequestInfo info = 1;
inline bool resp_msg::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void resp_msg::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::dealer::RequestInfo& resp_msg::info() const {
  const ::dealer::RequestInfo* p = info_;
  // @@protoc_insertion_point(field_get:dealer.resp_msg.info)
  return p != NULL ? *p : *reinterpret_cast<const ::dealer::RequestInfo*>(
      &::dealer::_RequestInfo_default_instance_);
}
inline ::dealer::RequestInfo* resp_msg::release_info() {
  // @@protoc_insertion_point(field_release:dealer.resp_msg.info)
  
  ::dealer::RequestInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::dealer::RequestInfo* resp_msg::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dealer::RequestInfo;
  }
  // @@protoc_insertion_point(field_mutable:dealer.resp_msg.info)
  return info_;
}
inline void resp_msg::set_allocated_info(::dealer::RequestInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:dealer.resp_msg.info)
}

// int32 ret_type = 2;
inline void resp_msg::clear_ret_type() {
  ret_type_ = 0;
}
inline ::google::protobuf::int32 resp_msg::ret_type() const {
  // @@protoc_insertion_point(field_get:dealer.resp_msg.ret_type)
  return ret_type_;
}
inline void resp_msg::set_ret_type(::google::protobuf::int32 value) {
  
  ret_type_ = value;
  // @@protoc_insertion_point(field_set:dealer.resp_msg.ret_type)
}

// int32 finish_status = 4;
inline void resp_msg::clear_finish_status() {
  finish_status_ = 0;
}
inline ::google::protobuf::int32 resp_msg::finish_status() const {
  // @@protoc_insertion_point(field_get:dealer.resp_msg.finish_status)
  return finish_status_;
}
inline void resp_msg::set_finish_status(::google::protobuf::int32 value) {
  
  finish_status_ = value;
  // @@protoc_insertion_point(field_set:dealer.resp_msg.finish_status)
}

// string comment = 5;
inline void resp_msg::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& resp_msg::comment() const {
  // @@protoc_insertion_point(field_get:dealer.resp_msg.comment)
  return comment_.GetNoArena();
}
inline void resp_msg::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dealer.resp_msg.comment)
}
#if LANG_CXX11
inline void resp_msg::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dealer.resp_msg.comment)
}
#endif
inline void resp_msg::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dealer.resp_msg.comment)
}
inline void resp_msg::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dealer.resp_msg.comment)
}
inline ::std::string* resp_msg::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:dealer.resp_msg.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* resp_msg::release_comment() {
  // @@protoc_insertion_point(field_release:dealer.resp_msg.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void resp_msg::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:dealer.resp_msg.comment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dealer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_5fdefine_5fnew_2eproto__INCLUDED
